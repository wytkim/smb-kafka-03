<?xml version="1.0" encoding="UTF-8"?>
<included>
	<!-- property 설정 -->
    <property name="FILE_LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}] - %msg%n%wEx" />
   	<property name="LOG_PATTERN" value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-25.25logger{25}[%4line]){cyan} %clr(:){faint} %m%n%wEx"/>
    <property name="ACCESS_LOG_PATTERN" value="%msg%n" />
    
	<property name="LOGS_PATH" value="logs"/>
   	<property name="LOG_FILE_NAME" value="kafka-local-error" /> 

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>${LOG_PATTERN}</Pattern>
        </layout>
    </appender>
    <appender name="JDBC_CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="com.smband.kafka.logback.LogJdbcFilter">
        	<sqltiming>getConfigModInfoList</sqltiming>
        	<resultsettable>conftype|modtimestr</resultsettable>
        </filter>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>${LOG_PATTERN}</Pattern>
        </layout>
    </appender>

    <appender name="ERROR_FILE_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGS_PATH}/${LOG_FILE_NAME}.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
        	<level>WARN</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
           <!--  <fileNamePattern>${LOGS_PATH}/catalina.out.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern> -->
            <fileNamePattern>${LOGS_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
        	<maxFileSize>50MB</maxFileSize>
        	<maxHistory>60</maxHistory>
        	<totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <appender name="ACCESS_FILE_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGS_PATH}/access.log</file>
        <encoder>
            <pattern>${ACCESS_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
        	<fileNamePattern>${LOGS_PATH}/access.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
        	<maxFileSize>50MB</maxFileSize>
        	<maxHistory>60</maxHistory>
        	<totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="ERROR_FILE_APPENDER" />
    </root>
    <logger name="com.smband.kafka" level="DEBUG" additivity="true" />
    <logger name="org.apache.kafka.clients.consumer" level="OFF" additivity="true" />
    <logger name="org.springframework.kafka.listener" level="DEBUG" additivity="true" />
    
    
    <logger name="org.mybatis.spring" level="OFF"/>
    <logger name="org.springframework.jdbc.datasource" level="OFF"/>
    
    <!-- log4jdbc 옵션 설정 -->
	<logger name="jdbc" level="OFF" /> 
	<!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
	<logger name="jdbc.connection" level="OFF" /> 
	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqlonly" level="OFF" /> 
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.sqltiming" level="OFF" additivity="false">
		<appender-ref ref="JDBC_CONSOLE"/>
	</logger> 
	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 
		추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
	<logger name="jdbc.audit" level="OFF" /> 
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	<logger name="jdbc.resultset" level="OFF" /> 
	<!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
	<logger name="jdbc.resultsettable" level="OFF" additivity="false">
		<appender-ref ref="JDBC_CONSOLE"/>
	</logger>
</included>